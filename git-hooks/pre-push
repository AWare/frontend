#!/usr/bin/env node
/* eslint-disable no-console */

const path = require('path');
const execa = require('execa');
const chalk = require('chalk');

const diff = () =>
    execa.stdout('git', [
        'diff',
        '--name-only',
        '--cached',
        '--diff-filter=AM',
    ]);

const validate = () =>
    execa
        .stdout('make', ['validate-head'], { stdio: 'inherit' })
        .catch(() =>
            Promise.reject(
                `${chalk.red(
                    `âœ‹ Linting failed. You can attempt to fix lint errors by running ${chalk.underline(
                        'make fix-head'
                    )}.\nYour changes have not been pushed`
                )}`
            )
        );

validate()
    // make sure yarn.lock is commited
    .then(diff)
    .then(staged => staged.split('\n'))
    .then(staged => {
        if (
            staged.some(file => file === 'package.json') &&
            !staged.some(file => file === 'yarn.lock')
        ) {
            return Promise.reject(
                `${chalk.red(
                    `${chalk.underline(
                        'package.json'
                    )} has changed but ${chalk.underline(
                        'yarn.lock'
                    )} is not included in this commit.`
                )}\n${chalk.dim(
                    `If this is intentional, commit this change with --no-verify.`
                )}`
            );
        }
        return staged;
    })
    // make sure docs TOC stays up to date
    .then(staged => {
        if (staged.some(file => file.includes('docs/'))) {
            const docs = path.resolve('docs');
            const readme = path.resolve(docs, 'README.md');
            return execa(path.resolve(docs, 'generate-toc.sh'), ['>', readme], {
                stdio: 'inherit',
            })
                .then(() => execa.sync('git', ['add', readme]))
                .then(() => staged);
        }
        return staged;
    })
    .catch(e => {
        console.log(`\n${e}\n`);
        process.exit(1);
    });
