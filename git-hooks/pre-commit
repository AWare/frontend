#!/usr/bin/env node
/* eslint-disable no-console */

const path = require('path');

const execa = require('execa');
const chalk = require('chalk');

execa
    .stdout('git', ['diff', '--name-only', '--cached'])
    .then(staged => staged.split('\n'))
    .then(staged => {
        const jsFiles = staged.filter(file => file.endsWith('.js'));
        if (jsFiles.length) {
            console.log(
                chalk.dim(
                    `Linting: \n${jsFiles.map(file => `  ${file}`).join('\n')}`
                )
            );
            execa.sync('yarn', ['eslint-fix', ...jsFiles]);
            execa.sync('git', ['add', ...jsFiles]);
        }

        if (
            staged.some(file => file === 'package.json') &&
            !staged.some(file => file === 'yarn.lock')
        ) {
            return Promise.reject(
                `${chalk.red(`${chalk.underline('package.json')} has changed but ${chalk.underline('yarn.lock')} is not included in this commit.`)}\n${chalk.dim(`If this is intentional, commit this change with --no-verify.`)}`
            );
        }

        if (staged.some(file => file.includes('docs/'))) {
            const docs = path.resolve('docs');
            const readme = path.resolve(docs, 'README.md');
            execa.sync(path.resolve(docs, 'generate-toc.sh'), ['>', readme]);
            execa.sync('git', [readme]);
        }
    })
    .catch(e => {
        console.log(`\n${e}\n`);
        process.exit(1);
    });
