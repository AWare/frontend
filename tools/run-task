#!/usr/bin/env node
/* eslint-disable no-console */

/*
This is lightweight task runner that uses listr to provide a UI,
Tasks are defined in ./__tasks__/

It takes one or more tasks to run as arguments, which should be paths within ./__tasks__ e.g.

./run-task fakemodule/fakemodule
    - runs the task defined in ./__tasks__/fakemodule/fakemodule.js

You can pass a `--dev` flag to prefer a dev version, if it exists (suffix the filename with `.dev`) e.g.

./run-task fakemodule/fakemodule --dev
    - runs ./__tasks__/fakemodule/fakemodule.dev.js if it exists
    - reverts to ./__tasks__/fakemodule/fakemodule.js if above fails

If a task module has multiple exports, they can be accessed with a `:`, e.g.

./run-task fakemoduleWithExports:fakeExport
    - runs exports.fakeExport from ./__tasks__/fakemoduleWithExports.js

If a task module has multiple exports, not specifying an export will run them all:

./run-task fakemoduleWithExports
    - runs all exports from ./__tasks__/fakemoduleWithExports.js

UNLESS it exports a default, in which case that will be run if no export is specified:

./run-task fakemoduleWithDefaultExports
    - runs exports.default from ./__tasks__/fakemoduleWithExportsAndDefault.js

Task definitions can be:
1. another task in __tasks__:
{
    title: "my task",
    task: "another/task" // same as `./run-task another/task`
}
2. a standard terminal command
{
    title: "my task",
    task: "terminal command"
}
3. a javascript function
{
    title: "my task",
    task: () => {...}
}
4. an array of any of the above, or another task
{
    title: "my task",
    task: [
        "another/task",
        "command to run",
        () => {...},
        {
            title: 'my subtask',
            task: 'task/subTask'
        }
    ]
}
*/

const path = require('path');

const yargs = require('yargs');
const Listr = require('listr');
const execa = require('execa');
const capitalise = require('lodash.capitalize');

const tasksIdentifier = '__tasks__';

const {dev: IS_DEV, verbose, _: TASKS} = yargs
    .option('dev', {
        demand: false,
        describe: 'Prefer the dev version of the task, if it exits.',
        type: 'boolean',
        nargs: 0
    })
    .usage('Usage: $0 <task>[:target] [<task>[:target]] [--dev]')
    .command('task', `Run a task defined in '${tasksIdentifier}'.`)
    .example('$0 copy', 'Run all the copy tasks.')
    .example('$0 javascript/copy', 'Run the javascript copy task.')
    .example('$0 javascript/copy:quick', 'Run the `quick` target of the javascript copy task.')
    .example('$0 javascript/copy --dev', 'Run the javascript copy task, and prefer the development version, if it exists.')
    .example('$0 javascript/copy css/copy --dev', 'Run the javascript and css copy tasks, and prefer the development versions, if they exist.')
    .demand(1)
    .help().alias('h', 'help')
    .version().alias('v', 'version')
    .argv;

const taskSrc = path.resolve(__dirname, tasksIdentifier);

const resolveModule = modulePath => {
    if (IS_DEV) {
        try {
            return require(modulePath + '.dev');
        } catch (e) {
            // do nothing
        }
        try {
            return require(modulePath + '/index.dev');
        } catch (e) {
            // do nothing
        }
    }
    return require(modulePath);
};

const getTasksFromModule = task => {
    try {
        const [taskName, targetName] = task.split(':');
        let module = resolveModule(path.resolve(taskSrc, taskName));

        if (module[targetName]) return module[targetName];
        if (module.task) return module;
        if (module.default) return module.default;
        return Object.keys(module).reduce((tasks, taskName) => {
            const {description, task, concurrent} = tasks;
            task.push(module[taskName]);
            return {description, task, concurrent};
        }, {description: `${capitalise(taskName.split('/').join(' '))}`, task: [], concurrent: true});
    } catch (e) {
        return null;
    }
};

// don't duplicate tasks
const cache = [];

function listrify(steps, {concurrent = false, verbose = false} = {}) {
    const listrTasks = steps
        .map(step => {
            const { description: title, task, concurrent } = step;
            // if another task has included this one, don't run it again
            const skip = cache.indexOf(step) !== -1 ? () => 'Skipping: already run by another task' : false;
            cache.push(step);

            // if the task is a set of subtasks, prepare them
            if (Array.isArray(task)) {
                return { title, task: () => listrify(task.map(_task => {
                    if (_task.task) return _task;

                    const module = getTasksFromModule(_task);
                    if (module) return module;

                    return { description: _task.toString(), task: _task};
                }), {concurrent}), skip};
            }

            // treat tasks that are strings as terminal commands
            if (typeof task === 'string') {
                const subTask = getTasksFromModule(task);
                if (subTask) {
                    return { title, task: () => listrify([subTask], {concurrent}), skip};
                } else {
                    const [binary, ...options] = task.trim().split(' ');
                    return { title, task: () => execa(binary, options), skip};
                }
            }

            return { title, task, skip };
        });

    return new Listr(listrTasks, {
        concurrent,
        collapse: true,
        renderer: verbose ? 'verbose' : 'default'
    });
}

const taskModules = TASKS.map(getTasksFromModule);

if (taskModules.filter(module => module !== null).length) {
    listrify(taskModules, {verbose}).run();
} else {
    console.log(`Cannot find tasks for '${TASKS}'?`);
}
